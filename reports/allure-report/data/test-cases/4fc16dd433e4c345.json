{"uid":"4fc16dd433e4c345","name":"Verified that in hr.employees salary is positive for all employees ","fullName":"tests.test_trn_db_hr_employees#test_salary_is_positive_for_all_employees","historyId":"2c1d46c00f593224fa4e93c440e6a2be","time":{"start":1680879342840,"stop":1680879342875,"duration":35},"description":"Salary is positive for all employees in hr.employees as expected","descriptionHtml":"<p>Salary is positive for all employees in hr.employees as expected</p>\n","status":"failed","statusMessage":"AssertionError: hr.employees has 3 rows with non-positive salary\nassert False","statusTrace":"querysample = 'TABLE_CHECKS_SQL_SELECT1', tabletouse = 'TRN_TABLE_EMPLOYEES'\nexpvalue = 0\n\n    @pytest.mark.employees\n    @pytest.mark.tc2\n    @pytest.mark.parametrize(\"querysample, tabletouse, expvalue\",\n                             [('TABLE_CHECKS_SQL_SELECT1', 'TRN_TABLE_EMPLOYEES', 0)\n                              ])\n    def test_salary_is_positive_for_all_employees(querysample, tabletouse, expvalue):\n        \"\"\"Salary is positive for all employees in hr.employees as expected\"\"\"\n        allure.dynamic.title(f'Verified that in {db_tables(tabletouse)} '\n                             f'salary is positive for all employees ')\n        test_query = Helpers.evaluate_query(query_samples(querysample), 'employee_id,salary', db_variables('database'),\n                                            db_tables(tabletouse), 'salary <= 0')\n        pd = DbLib().execute_sql(test_query)\n        passed, rownum, rows = Helpers.check_number_of_rows(pd, expvalue)\n        if not passed:\n            LOGGER.error('{} has {} rows with non-positive salary'.format(db_tables(tabletouse), rownum))\n            LOGGER.error('\\r\\nFAILED ROWS:\\r\\n{}\\r\\n'.format(rows))\n>       assert passed, '{} has {} rows with non-positive salary'.format(db_tables(tabletouse), rownum)\nE       AssertionError: hr.employees has 3 rows with non-positive salary\nE       assert False\n\ntest_trn_db_hr_employees.py:47: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"Salary is positive for all employees in hr.employees as expected","status":"failed","statusMessage":"AssertionError: hr.employees has 3 rows with non-positive salary\nassert False","statusTrace":"querysample = 'TABLE_CHECKS_SQL_SELECT1', tabletouse = 'TRN_TABLE_EMPLOYEES'\nexpvalue = 0\n\n    @pytest.mark.employees\n    @pytest.mark.tc2\n    @pytest.mark.parametrize(\"querysample, tabletouse, expvalue\",\n                             [('TABLE_CHECKS_SQL_SELECT1', 'TRN_TABLE_EMPLOYEES', 0)\n                              ])\n    def test_salary_is_positive_for_all_employees(querysample, tabletouse, expvalue):\n        \"\"\"Salary is positive for all employees in hr.employees as expected\"\"\"\n        allure.dynamic.title(f'Verified that in {db_tables(tabletouse)} '\n                             f'salary is positive for all employees ')\n        test_query = Helpers.evaluate_query(query_samples(querysample), 'employee_id,salary', db_variables('database'),\n                                            db_tables(tabletouse), 'salary <= 0')\n        pd = DbLib().execute_sql(test_query)\n        passed, rownum, rows = Helpers.check_number_of_rows(pd, expvalue)\n        if not passed:\n            LOGGER.error('{} has {} rows with non-positive salary'.format(db_tables(tabletouse), rownum))\n            LOGGER.error('\\r\\nFAILED ROWS:\\r\\n{}\\r\\n'.format(rows))\n>       assert passed, '{} has {} rows with non-positive salary'.format(db_tables(tabletouse), rownum)\nE       AssertionError: hr.employees has 3 rows with non-positive salary\nE       assert False\n\ntest_trn_db_hr_employees.py:47: AssertionError","steps":[],"attachments":[{"uid":"c535f99c5fdf63c7","name":"log","source":"c535f99c5fdf63c7.txt","type":"text/plain","size":282}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[],"labels":[{"name":"tag","value":"tc2"},{"name":"tag","value":"employees"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_trn_db_hr_employees"},{"name":"host","value":"EPBYMINW09DC"},{"name":"thread","value":"7504-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_trn_db_hr_employees"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expvalue","value":"0"},{"name":"querysample","value":"'TABLE_CHECKS_SQL_SELECT1'"},{"name":"tabletouse","value":"'TRN_TABLE_EMPLOYEES'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["tc2","employees"]},"source":"4fc16dd433e4c345.json","parameterValues":["0","'TABLE_CHECKS_SQL_SELECT1'","'TRN_TABLE_EMPLOYEES'"]}