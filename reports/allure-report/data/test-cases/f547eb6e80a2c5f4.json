{"uid":"f547eb6e80a2c5f4","name":"Verified that for hr.locations length of text in address column in hr.locations table is less than size of column","fullName":"tests.test_trn_db_hr_locations#test_adress_length_is_less_than_column_size_locations_table","historyId":"7880b154c61d63b4edf0dae6c7501e1f","time":{"start":1680879343397,"stop":1680879343429,"duration":32},"description":"length of text in address column in hr.locations table is less than size of column","descriptionHtml":"<p>length of text in address column in hr.locations table is less than size of column</p>\n","status":"failed","statusMessage":"AssertionError: hr.locations has 1 rows with max allowed length of address\nassert False","statusTrace":"querysample = 'TABLE_CHECKS_SQL_SELECT1', tabletouse = 'TRN_TABLE_LOCATIONS'\nexpvalue = 0\n\n    @pytest.mark.locations\n    @pytest.mark.tc6\n    @pytest.mark.parametrize(\"querysample, tabletouse, expvalue\",\n                             [('TABLE_CHECKS_SQL_SELECT1','TRN_TABLE_LOCATIONS', 0)\n                              ])\n    def test_adress_length_is_less_than_column_size_locations_table(querysample, tabletouse, expvalue):\n        \"\"\"length of text in address column in hr.locations table is less than size of column\"\"\"\n        allure.dynamic.title(f'Verified that for {db_tables(tabletouse)} '\n                             f'length of text in address column in hr.locations table is less than size of column')\n        test_query = Helpers.evaluate_query(query_samples(querysample),'location_id,street_address',db_variables('database'),\n                               db_tables(tabletouse), 'len([street_address])>=40')\n        pd = DbLib().execute_sql(test_query)\n        passed, rownum, rows = Helpers.check_number_of_rows(pd, expvalue)\n        if not passed:\n            LOGGER.error('{} has {} rows with max allowed length of address'.format(db_tables(tabletouse),rownum))\n            LOGGER.error('\\r\\nFAILED ROWS:\\r\\n{}\\r\\n'.format(rows))\n>       assert passed, '{} has {} rows with max allowed length of address'.format(db_tables(tabletouse),rownum)\nE       AssertionError: hr.locations has 1 rows with max allowed length of address\nE       assert False\n\ntest_trn_db_hr_locations.py:45: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"length of text in address column in hr.locations table is less than size of column","status":"failed","statusMessage":"AssertionError: hr.locations has 1 rows with max allowed length of address\nassert False","statusTrace":"querysample = 'TABLE_CHECKS_SQL_SELECT1', tabletouse = 'TRN_TABLE_LOCATIONS'\nexpvalue = 0\n\n    @pytest.mark.locations\n    @pytest.mark.tc6\n    @pytest.mark.parametrize(\"querysample, tabletouse, expvalue\",\n                             [('TABLE_CHECKS_SQL_SELECT1','TRN_TABLE_LOCATIONS', 0)\n                              ])\n    def test_adress_length_is_less_than_column_size_locations_table(querysample, tabletouse, expvalue):\n        \"\"\"length of text in address column in hr.locations table is less than size of column\"\"\"\n        allure.dynamic.title(f'Verified that for {db_tables(tabletouse)} '\n                             f'length of text in address column in hr.locations table is less than size of column')\n        test_query = Helpers.evaluate_query(query_samples(querysample),'location_id,street_address',db_variables('database'),\n                               db_tables(tabletouse), 'len([street_address])>=40')\n        pd = DbLib().execute_sql(test_query)\n        passed, rownum, rows = Helpers.check_number_of_rows(pd, expvalue)\n        if not passed:\n            LOGGER.error('{} has {} rows with max allowed length of address'.format(db_tables(tabletouse),rownum))\n            LOGGER.error('\\r\\nFAILED ROWS:\\r\\n{}\\r\\n'.format(rows))\n>       assert passed, '{} has {} rows with max allowed length of address'.format(db_tables(tabletouse),rownum)\nE       AssertionError: hr.locations has 1 rows with max allowed length of address\nE       assert False\n\ntest_trn_db_hr_locations.py:45: AssertionError","steps":[],"attachments":[{"uid":"58b4e7b92bbe6786","name":"log","source":"58b4e7b92bbe6786.txt","type":"text/plain","size":318}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[],"labels":[{"name":"tag","value":"tc6"},{"name":"tag","value":"locations"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_trn_db_hr_locations"},{"name":"host","value":"EPBYMINW09DC"},{"name":"thread","value":"7504-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_trn_db_hr_locations"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expvalue","value":"0"},{"name":"querysample","value":"'TABLE_CHECKS_SQL_SELECT1'"},{"name":"tabletouse","value":"'TRN_TABLE_LOCATIONS'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["tc6","locations"]},"source":"f547eb6e80a2c5f4.json","parameterValues":["0","'TABLE_CHECKS_SQL_SELECT1'","'TRN_TABLE_LOCATIONS'"]}