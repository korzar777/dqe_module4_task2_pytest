{"name": "Verified that for hr.locations length of text in address column in hr.locations table is less than size of column", "status": "failed", "statusDetails": {"message": "AssertionError: hr.locations has 1 rows with max allowed length of address\nassert False", "trace": "querysample = 'TABLE_CHECKS_SQL_SELECT1', tabletouse = 'TRN_TABLE_LOCATIONS'\nexpvalue = 0\n\n    @pytest.mark.locations\n    @pytest.mark.tc6\n    @pytest.mark.parametrize(\"querysample, tabletouse, expvalue\",\n                             [('TABLE_CHECKS_SQL_SELECT1','TRN_TABLE_LOCATIONS', 0)\n                              ])\n    def test_adress_length_is_less_than_column_size_locations_table(querysample, tabletouse, expvalue):\n        \"\"\"length of text in address column in hr.locations table is less than size of column\"\"\"\n        allure.dynamic.title(f'Verified that for {db_tables(tabletouse)} '\n                             f'length of text in address column in hr.locations table is less than size of column')\n        test_query = Helpers.evaluate_query(query_samples(querysample),'location_id,street_address',db_variables('database'),\n                               db_tables(tabletouse), 'len([street_address])>=40')\n        pd = DbLib().execute_sql(test_query)\n        passed, rownum, rows = Helpers.check_number_of_rows(pd, expvalue)\n        if not passed:\n            LOGGER.error('{} has {} rows with max allowed length of address'.format(db_tables(tabletouse),rownum))\n            LOGGER.error('\\r\\nFAILED ROWS:\\r\\n{}\\r\\n'.format(rows))\n>       assert passed, '{} has {} rows with max allowed length of address'.format(db_tables(tabletouse),rownum)\nE       AssertionError: hr.locations has 1 rows with max allowed length of address\nE       assert False\n\ntest_trn_db_hr_locations.py:45: AssertionError"}, "description": "length of text in address column in hr.locations table is less than size of column", "attachments": [{"name": "log", "source": "d65f3b26-c3d5-4742-a58c-fa59ea616509-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "querysample", "value": "'TABLE_CHECKS_SQL_SELECT1'"}, {"name": "tabletouse", "value": "'TRN_TABLE_LOCATIONS'"}, {"name": "expvalue", "value": "0"}], "start": 1680879343397, "stop": 1680879343429, "uuid": "101e5d01-0e97-4823-9c52-db37fbf7df48", "historyId": "7880b154c61d63b4edf0dae6c7501e1f", "testCaseId": "39f6c4b071e4e0b689eafa8c9fad603a", "fullName": "tests.test_trn_db_hr_locations#test_adress_length_is_less_than_column_size_locations_table", "labels": [{"name": "tag", "value": "tc6"}, {"name": "tag", "value": "locations"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_trn_db_hr_locations"}, {"name": "host", "value": "EPBYMINW09DC"}, {"name": "thread", "value": "7504-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_trn_db_hr_locations"}]}