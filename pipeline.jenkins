pipeline {
    agent any

    environment {
        APP_BUILD_ID = 0.1
        FULL_PATH_BRANCH = "${sh(script:'git name-rev --name-only HEAD', returnStdout: true)}"
        GIT_BRANCH = FULL_PATH_BRANCH.substring(FULL_PATH_BRANCH.lastIndexOf('/') + 1, FULL_PATH_BRANCH.length())
    }
    //options {
        // This is required if you want to clean before build
    //    skipDefaultCheckout(true)
    //}
    stages {
        //stage('Checkout Stage') {
        //    steps {
        //        checkout scmGit(branches: [[name: 'origin/dev_local']], extensions: [], userRemoteConfigs: [[credentialsId: '5ae0ff0a-fad7-4001-a96a-5a1d91a178de', url: 'https://github.com/korzar777/dqe_module4_task2_pytest.git/']])
        //    }
        //}
        stage('Build') {
            steps {
                cleanWs()
                // We need to explicitly checkout from SCM here
                //echo 'Clean workspace before we start ..'
                //checkout scm
                echo 'Building..'
                echo "Running ${env.BUILD_ID} ${env.BUILD_DISPLAY_NAME} on ${env.NONE_NAME} and JOB ${env.JOB_NAME}"
                echo "Branch ${env.GIT_BRANCH}"
                withEnv(["HOME=${env.WORKSPACE}"]) {
                    //sh 'python3 -m pip install --upgrade pip'

                    sh 'python3 -m venv venv'
                    sh '. venv/bin/activate'
                    sh 'pip install -r requirements.txt'
                    sh 'rm -r reports/allure-results/*'
                }
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'

                withEnv(["HOME=${env.WORKSPACE}"]) {
                    sh 'python3 -m pytest -m jobs --alluredir=reports/allure-results'
                    //sh 'python3 -m pytest  --alluredir=reports/allure-results'
                }
            }
            post {
                // If pytest was able to run the tests, even if some of the test
                // failed, show report.
                always {
                    allure([
                            includeProperties: false,
                            jdk: '',
                            properties: [],
                            reportBuildPolicy: 'ALWAYS',
                            report: 'reports/allure-report',
                            results: [[path: 'reports/allure-results']]
                    ])
                }
            }
        }

        stage('Deliver to git') {
            steps {
                echo 'Test passed...Merging current dev results to pre-prod branch.'
                withCredentials([gitUsernamePassword(credentialsId: '5ae0ff0a-fad7-4001-a96a-5a1d91a178de', gitToolName: 'Default')]) {
                    sh 'git push origin HEAD:pre_prod'
                }
            }
            post {
            // Clean after build
                echo 'Clean workspace'
                always {
                    cleanWs(cleanWhenNotBuilt: false,
                            deleteDirs: true,
                            disableDeferredWipeout: true,
                            notFailBuild: true,
                            patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                                       [pattern: '.propsfile', type: 'EXCLUDE']])
                }
            }
        }



    }
}